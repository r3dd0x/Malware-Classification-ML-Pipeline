import os
import joblib
import pandas as pd
import numpy as np
from flask import Flask, request, jsonify
from flasgger import Swagger
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences

app = Flask(__name__)
Swagger(app)

# Load the trained scaler and model
scaler = joblib.load('scaler.joblib')
selector = joblib.load('selector.joblib')
model = load_model('model.h5')

# Load the label encoder
label_encoder = joblib.load('label_encoder.joblib')

@app.route('/predict', methods=['POST'])
def predict():
    """
    Predict malware class for new data
    ---
    parameters:
      - name: body
        in: body
        required: true
        schema:
          id: PredictInput
          properties:
            features:
              type: array
              items:
                type: number
              description: List of feature values (length 9503)
    responses:
      200:
        description: Successfully predicted malware class
        schema:
          id: PredictOutput
          properties:
            prediction:
              type: string
              description: Predicted malware class
    """
    data = request.get_json()
    features = data['features']
    
    if len(features) != 9503:
        return "Error: Expected feature length is 9503", 400

    # Convert data to a DataFrame
    new_data = pd.DataFrame([features])

    # Preprocess the data
    new_data = scaler.transform(new_data)
    new_data_selected = selector.transform(new_data)

    # Make predictions using the model
    prediction = model.predict(new_data_selected)
    predicted_class = np.argmax(prediction, axis=1)[0]

    # Map the predicted class to the original label
    predicted_label = label_encoder.inverse_transform([predicted_class])[0]

    return jsonify(prediction=predicted_label)

if __name__ == '__main__':
    app.run(debug=True)